{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documenta\u00e7\u00e3o package Seg Auth","title":"Home"},{"location":"#documentacao-package-seg-auth","text":"","title":"Documenta\u00e7\u00e3o package Seg Auth"},{"location":"config_gerais/","text":"Nesse t\u00f3pico ser\u00e3o abordadas as configura\u00e7\u00f5es gerais para implementar um modulo de autentica\u00e7\u00e3o via package Seg Auth. 1. Depend\u00eancias \u2003Clone os reposit\u00f3rios dos packages seg_app e seg_auth , atrav\u00e9s do github. \u2003No arquivo pubspec.yaml , instale os packages, indicando o diret\u00f3rio onde os packages foram clonados. Por exemplo: dependencies : seg_app : path : ../../../seg_packages/projeto-seg_app/seg_app seg_auth : path : ../../../seg_packages/projeto-seg_auth/seg_auth 2. Arquitetura \u2003Depois de instalar todas as dependencias, o pr\u00f3ximo passo \u00e9 organizar a arquitetura e estrutura de pastas do nosso modulo de autentica\u00e7\u00e3o. O modulo de autentica\u00e7\u00e3o \u00e9 organizado seguindo o padr\u00e3o geralmente utilizadas em outros modulos, baseado no design pattern MVC. A estrutura de pastas deve ficar da seguinte forma: \u251c\u2500\u2500 login/ \u2502 \u2514\u2500\u2500 login.controller.dart \u2502 \u2514\u2500\u2500 login.view.dart \u251c\u2500\u2500 cadastro/ \u2502 \u2514\u2500\u2500 cadastro.controller.dart \u2502 \u2514\u2500\u2500 cadastro.view.dart \u251c\u2500\u2500 models/ \u2003 O modulo \u00e9 dividido em dois grupos: login e cadastro . Cada grupo segue o design pattern MVC, ou seja, \u00e9 composto de uma camada view e de outra camada controller. Al\u00e9m desses dois grupos, o modulo cont\u00e9m a pasta referente a camada models, essa pasta ir\u00e1 conter models que s\u00e3o utilizados quando h\u00e1 a necessidade de uma maior personaliza\u00e7\u00e3o, por exemplo o model de um usu\u00e1rio que cont\u00e9m parametros al\u00e9m do model de usu\u00e1rio default. \u2003 Essa \u00e9 a estrutura minima necess\u00e1ria, mas dependendo do projeto pode ser necess\u00e1rio utilizar dentro do grupo outros tipos de pastas gen\u00e9ricas, como por exemplo pasta widgets, components, etc. 3. Setar configura\u00e7\u00f5es A grosso modo, podemos dizer que o processo de autentica\u00e7\u00e3o \u00e9 igual para qualquer app. Mas existem pequenas varia\u00e7\u00f5es no processo, por exemplo para qual p\u00e1gina \u00e9 redirecionado ap\u00f3s realizar o login, etc. A configura\u00e7\u00e3o do processo de autentica\u00e7\u00e3o \u00e9 feito no App Controller atrav\u00e9s da classe AuthPreferences() . Para configurar o processo de autentica\u00e7\u00e3o instancie a classe AuthPreferences() dentro do AppController, conforme demonstrado no exemplo a seguir: @override AuthPreferences authPreferences = AuthPreferences ( privateRoute: AppRoutes . HOME , afterDisconnectRoute: AppRoutes . LOGIN , userModel: User (), ///[ Esse parametro \u00e9 utilziado somente quando h\u00e1 necessidade de utilizar um model de usu\u00e1rio personalzado ] publicRoute: AppRoutes . LOGIN , );","title":"Configura\u00e7\u00f5es gerais"},{"location":"config_gerais/#1-dependencias","text":"Clone os reposit\u00f3rios dos packages seg_app e seg_auth , atrav\u00e9s do github. \u2003No arquivo pubspec.yaml , instale os packages, indicando o diret\u00f3rio onde os packages foram clonados. Por exemplo: dependencies : seg_app : path : ../../../seg_packages/projeto-seg_app/seg_app seg_auth : path : ../../../seg_packages/projeto-seg_auth/seg_auth","title":"1. Depend\u00eancias"},{"location":"config_gerais/#2-arquitetura","text":"Depois de instalar todas as dependencias, o pr\u00f3ximo passo \u00e9 organizar a arquitetura e estrutura de pastas do nosso modulo de autentica\u00e7\u00e3o. O modulo de autentica\u00e7\u00e3o \u00e9 organizado seguindo o padr\u00e3o geralmente utilizadas em outros modulos, baseado no design pattern MVC. A estrutura de pastas deve ficar da seguinte forma: \u251c\u2500\u2500 login/ \u2502 \u2514\u2500\u2500 login.controller.dart \u2502 \u2514\u2500\u2500 login.view.dart \u251c\u2500\u2500 cadastro/ \u2502 \u2514\u2500\u2500 cadastro.controller.dart \u2502 \u2514\u2500\u2500 cadastro.view.dart \u251c\u2500\u2500 models/ \u2003 O modulo \u00e9 dividido em dois grupos: login e cadastro . Cada grupo segue o design pattern MVC, ou seja, \u00e9 composto de uma camada view e de outra camada controller. Al\u00e9m desses dois grupos, o modulo cont\u00e9m a pasta referente a camada models, essa pasta ir\u00e1 conter models que s\u00e3o utilizados quando h\u00e1 a necessidade de uma maior personaliza\u00e7\u00e3o, por exemplo o model de um usu\u00e1rio que cont\u00e9m parametros al\u00e9m do model de usu\u00e1rio default. \u2003 Essa \u00e9 a estrutura minima necess\u00e1ria, mas dependendo do projeto pode ser necess\u00e1rio utilizar dentro do grupo outros tipos de pastas gen\u00e9ricas, como por exemplo pasta widgets, components, etc.","title":"2. Arquitetura"},{"location":"config_gerais/#3-setar-configuracoes","text":"A grosso modo, podemos dizer que o processo de autentica\u00e7\u00e3o \u00e9 igual para qualquer app. Mas existem pequenas varia\u00e7\u00f5es no processo, por exemplo para qual p\u00e1gina \u00e9 redirecionado ap\u00f3s realizar o login, etc. A configura\u00e7\u00e3o do processo de autentica\u00e7\u00e3o \u00e9 feito no App Controller atrav\u00e9s da classe AuthPreferences() . Para configurar o processo de autentica\u00e7\u00e3o instancie a classe AuthPreferences() dentro do AppController, conforme demonstrado no exemplo a seguir: @override AuthPreferences authPreferences = AuthPreferences ( privateRoute: AppRoutes . HOME , afterDisconnectRoute: AppRoutes . LOGIN , userModel: User (), ///[ Esse parametro \u00e9 utilziado somente quando h\u00e1 necessidade de utilizar um model de usu\u00e1rio personalzado ] publicRoute: AppRoutes . LOGIN , );","title":"3. Setar configura\u00e7\u00f5es"}]}